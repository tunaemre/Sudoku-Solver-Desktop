using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace Sudoku_Solver
{
    public partial class Sudoku : Form
    {
        public class CellAddr
        {
            public int row { get; set; }
            public int column { get; set; }
        }

        public class MatrixChangedEventArgs : EventArgs
        {
            public TextBox textBox { get; set; }
            public string value { get; set; }
        }

        public class ProgressChangedEventArgs : EventArgs
        {
            public ProgressBar progressBar { get; set; }
            public int progress{ get; set; }
        }

        static TextBox[,] formMatrix = new TextBox[9,9];

        static int[,] originalMatrix, currentMatrix;
        static Dictionary<CellAddr, int> originalAvailableMatrix, currentAvailableMatrix;

        //static List<int>[,] invalidValuesMatrix;

        static int blankCellCount, currentProgress, iterateCount;

        static IEnumerable<int> values;

        static Random rand = new Random();

        //static List<CellAddr> history = new List<CellAddr>();

        public Sudoku()
        {
            InitializeComponent();

            for (int row = 0; row < 9; row++)
            {
                for (int column = 0; column < 9; column++)
                {
                    TextBox cell = new TextBox();
                    cell.Location = new System.Drawing.Point(13 + column * 20 + column * 6, 13 + row * 20 + row * 6);
                    cell.Name = "cell-" + row + "-" + column;
                    cell.Size = new System.Drawing.Size(20, 20);
                    cell.TabIndex = 0;
                    cell.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;

                    this.Controls.Add(cell);

                    formMatrix[row,column] = cell;
                }
            }

            values = Enumerable.Range(1, 9);

            fillTestMatrix();
        }

        void fillTestMatrix()
        {
            formMatrix[0, 1].Text = "1";
            formMatrix[0, 5].Text = "2";
            formMatrix[0, 6].Text = "3";

            formMatrix[1, 1].Text = "4";
            formMatrix[1, 3].Text = "5";
            formMatrix[1, 4].Text = "1";
            formMatrix[1, 7].Text = "6";
            formMatrix[1, 8].Text = "7";

            formMatrix[2, 5].Text = "8";
            formMatrix[2, 7].Text = "2";

            formMatrix[3, 0].Text = "9";
            formMatrix[3, 2].Text = "7";
            formMatrix[3, 6].Text = "1";

            formMatrix[4, 1].Text = "6";
            formMatrix[4, 4].Text = "5";
            formMatrix[4, 7].Text = "7";

            formMatrix[5, 2].Text = "3";
            formMatrix[5, 6].Text = "2";
            formMatrix[5, 8].Text = "6";

            formMatrix[6, 1].Text = "3";
            formMatrix[6, 3].Text = "9";

            formMatrix[7, 0].Text = "5";
            formMatrix[7, 1].Text = "2";
            formMatrix[7, 4].Text = "4";
            formMatrix[7, 5].Text = "1";
            formMatrix[7, 7].Text = "9";

            formMatrix[8, 2].Text = "6";
            formMatrix[8, 3].Text = "3";
            formMatrix[8, 7].Text = "8";
        }

        private void buttonSolve_Click(object sender, EventArgs e)
        {
            originalMatrix = new int[9, 9];

            blankCellCount = 0;

            for (int row = 0; row < 9; row++)
            {
                for (int column = 0; column < 9; column++)
                {
                    TextBox cell = formMatrix[row, column];

                    int value = -1;
                    if (string.IsNullOrWhiteSpace(cell.Text))
                    {
                        originalMatrix[row, column] = value;
                        blankCellCount++;
                        continue;
                    }

                    if (Int32.TryParse(cell.Text, out value) && value > 0 && value < 10)
                        originalMatrix[row, column] = value;
                    else
                    {
                        onError(cell.Text);
                        return;
                    }

                }
            }

            currentMatrix = (int[,]) originalMatrix.Clone();

            originalAvailableMatrix = new Dictionary<CellAddr, int>();

            for (int row = 0; row < 9; row++)
            {
                for (int column = 0; column < 9; column++)
                {
                    CellAddr addr = new CellAddr()
                    {
                        row = row,
                        column = column
                    };

                    if (originalMatrix[row, column] != -1)
                    {
                        originalAvailableMatrix[addr] = 99;
                        continue;
                    }

                    originalAvailableMatrix[addr] = getAvailables(addr).Count;
                }
            }

            currentAvailableMatrix = new Dictionary<CellAddr, int>(originalAvailableMatrix);

            //invalidValuesMatrix = new List<int>[9, 9];

            progressBar.Maximum = blankCellCount;

            buttonSolve.Enabled = false;

            currentProgress = 0;

            iterateCount = 0;

            Thread mainThread = new Thread(new ThreadStart(start));
            mainThread.Start();

            buttonSolve.Enabled = true;
        }

        void start()
        {
            while (currentProgress < blankCellCount)
                iterate();
        }

        void iterate()
        {
            iterateCount++;

            //CellAddr cellAddr = getRandomCell();
            //CellAddr cellAddr = getNextCell();
            CellAddr cellAddr = getQuenedCell();

            int value = getRandomValue(cellAddr);
            if (value == -1)
            {
                //for (int i = 0; i < 9; i++)
                //{
                //    for (int j = 0; j < 9; j++)
                //    {
                //        if (originalMatrix[i, j] != -1 || currentMatrix[i, j] == -1)
                //            continue;

                //        if (invalidValuesMatrix[i, j] == null)
                //            invalidValuesMatrix[i, j] = new List<int>();

                //        invalidValuesMatrix[i, j].Add(currentMatrix[i, j]);
                //    }
                //}
                currentProgress = 0;
                currentMatrix = (int[,])originalMatrix.Clone();
                currentAvailableMatrix = new Dictionary<CellAddr, int>(originalAvailableMatrix);
            }
            else
            {
                currentMatrix[cellAddr.row, cellAddr.column] = value;
                currentAvailableMatrix[cellAddr] = 99;

                currentProgress++;

                formMatrixUpdater(this, new MatrixChangedEventArgs()
                {
                    textBox = formMatrix[cellAddr.row, cellAddr.column],
                    value = value.ToString()
                });

                progressBarUpdater(this, new ProgressChangedEventArgs()
                {
                    progressBar = progressBar,
                    progress = currentProgress
                });
            }
        }

        static CellAddr getQuenedCell()
        {
            for (int row = 0; row < 9; row++)
            {
                for (int column = 0; column < 9; column++)
                {
                    if (currentMatrix[row, column] == -1)
                        return new CellAddr()
                        {
                            row = row,
                            column = column
                        };
                }
            }

            return null;
        }

        static CellAddr getNextCell()
        {
            return currentAvailableMatrix.OrderBy(x => x.Value).First().Key;
        }

        [Obsolete]
        static CellAddr getRandomCell()
        {
            int row = rand.Next(0, 8), column = rand.Next(0, 8);

            if (currentMatrix[row, column] == -1)
                return new CellAddr()
                {
                    row = row,
                    column = column
                };
            else
                return getRandomCell();
        }

        static List<int> getAvailables(CellAddr cellAddr)
        {
            List<int> available = values.ToList();

            for (int i = 0; i < 9; i++)
            {
                if (currentMatrix[i, cellAddr.column] != -1)
                    available.Remove(currentMatrix[i, cellAddr.column]);

                if (currentMatrix[cellAddr.row, i] != -1)
                    available.Remove(currentMatrix[cellAddr.row, i]);
            }

            int[] rows, columns;
            if (cellAddr.row < 3)
                rows = new int[] { 0, 1, 2 };
            else if (cellAddr.row < 6)
                rows = new int[] { 3, 4, 5 };
            else if (cellAddr.row < 9)
                rows = new int[] { 6, 7, 8 };
            if (cellAddr.column < 3)
                columns = new int[] { 0, 1, 2 };
            else if (cellAddr.column < 6)
                columns = new int[] { 3, 4, 5 };
            else if (cellAddr.column < 9)
                columns = new int[] { 6, 7, 8 };

            for (int i = 0; i < 3; i++)
            {
                for (int j = 0; j < 3; j++)
                {
                    if (currentMatrix[i, j] != -1)
                        available.Remove(currentMatrix[i, j]);
                }
            }

            //if (invalidValuesMatrix[cellAddr.row, cellAddr.column] != null)
            //    foreach (int pastValue in invalidValuesMatrix[cellAddr.row, cellAddr.column])
            //        available.Remove(pastValue);

            return available;
        }

        static int getRandomValue(CellAddr cellAddr)
        {

            List<int> available = getAvailables(cellAddr);

            if (available.Count == 0)
                return -1;

            return available[rand.Next(0, available.Count - 1)];
        }

        private void onError(string value)
        {
            MessageBox.Show("Invalid cell value: " + value, "Error", MessageBoxButtons.OK, MessageBoxIcon.Stop);
        }

        void formMatrixUpdater(object sender, MatrixChangedEventArgs e)
        {
            MethodInvoker methodInvokerDelegate = delegate ()
            {
                e.textBox.Text = e.value;
                e.textBox.Focus();
            };

            if (e.textBox.InvokeRequired)
                e.textBox.Invoke(methodInvokerDelegate);
            else
                methodInvokerDelegate();
        }

        void progressBarUpdater(object sender, ProgressChangedEventArgs e)
        {
            MethodInvoker methodInvokerDelegate = delegate ()
            {
                e.progressBar.Value = e.progress;
            };

            if (e.progressBar.InvokeRequired)
                e.progressBar.Invoke(methodInvokerDelegate);
            else
                methodInvokerDelegate();
        }
    }
}
